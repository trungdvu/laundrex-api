name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_ENV: ${{ vars.NODE_ENV }}
  DOCKER_USER: ${{ vars.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ vars.EC2_HOST }}
  EC2_USER: ${{ vars.EC2_USER }}
  EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
  POSTGRES_USER: ${{ vars.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_EXPIRATION: ${{ vars.JWT_EXPIRATION }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Docker login
        run: |
          echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - name: Docker push
        run: |
          docker build -t $DOCKER_USER/laundrex-api:latest .
          docker push $DOCKER_USER/laundrex-api:latest
      - name: Docker pull and run
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: NODE_ENV, DOCKER_USER, DOCKER_PASSWORD, POSTGRES_HOST, POSTGRES_PORT, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, JWT_SECRET, JWT_EXPIRATION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
          script: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
            docker container stop laundrex-api
            docker container rm laundrex-api
            docker image rm $DOCKER_USER/laundrex-api:latest
            docker pull $DOCKER_USER/laundrex-api:latest
            docker run -d --name laundrex-api -p 8080:8080 --network=host -e NODE_ENV=$NODE_ENV -e POSTGRES_HOST=$POSTGRES_HOST -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_DB=$POSTGRES_DB -e POSTGRES_PORT=$POSTGRES_PORT -e JWT_SECRET=$JWT_SECRET -e JWT_EXPIRATION=$JWT_EXPIRATION -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY $DOCKER_USER/laundrex-api:latest
            docker exec -d laundrex-api npm run migration:run:prod
